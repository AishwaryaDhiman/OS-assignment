#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>


struct Processes{
	int arr_time,burst_time,wait_time,turn_a_time;
	char pname[4];
};

struct Processes initialize(int arr_time,int burst_time,int pname){
	struct Processes X;
	X.burst_time = burst_time;
	X.arr_time = arr_time;
	sprintf(X.pname,"P%d",pname+1);

	return X;
}

int main(){
	
	FILE *fpo = fopen(FILE_NAME,"r");

	if(!fpo)
		return -1*printf("FILE OPEN ERROR!n");
    printf("THE SOLUTION \n \n");
    printf("-The numbers present in the file were:"

    int d,i,j,num=0;

    int *queue = (int*)malloc(sizeof(int));

 
    while(EOF != fscanf(fpo,"%d ",&d )){
    	if(d<0){printf("The number is negative \n,program won't work \n"); fclose(fpo); return 0;
        printf("%d ",d);
    	queue = (int*)realloc(queue,(num+1)*sizeof(int));
    	queue[num++] = d;
    }
    fclose(fpo);

	
	
	struct Processes P[num];

	for(i=0; i<num; i++)
		P[i] = initialize(0,queue[i],i);

	
	for(i=1; i<num; i++){
		for(j=0; j<num-i; j++){
			if(P[j].burst_time>P[j+1].burst_time){
				struct Processes tempor = P[j];
				P[j] = P[j+1];
				P[j+1] = tempor;
			}
		}
	}

	printf("\n Order : ");

	int elapsed_time=0;
	for(i=0; i<num; i++){
		P[i].wait_time = elapsed_time;
		P[i].turn_a_time= P[i].wait_time+P[i].burst_time;
		elapsed_time += P[i].burst_time;

		printf("%s ",P[i].pname);
	}
	//sort again
	for(i=1; i<num; i++){
		for(j=0; j<num-i; j++){
			if(P[j].pname[1]>P[j+1].pname[1]){
				struct Processes tempor = P[j];
				P[j] = P[j+1];
				P[j+1] = tempor;
			}
		}
	}
	printf("\n\n %7s|%8s|%6s|%7s \n","PROCESS","ARRIVAL","BURST","WAIT","TURNAROUND");
	
	int total_wait=0,total_turnt=0;
	
	for(i=0; i<count; i++){
		total_wait+=P[i].wait_time;
		total_turnt+=P[i].turn_a_time;
		printf("%7s|%8d|%6d|%7d| \n",P[i].pname,P[i].arr_time,P[i].burst_time,P[i].wait_time,P[i].turn_a_time);
	}
	
	printf("n Average Waiting Time     : %.2fn",total_wait*1.0/num);
	printf("nAverage Turn Around Time : %.2fn",total_turnt*1.0/num);
	
	return 0*printf("n exit n");
}
